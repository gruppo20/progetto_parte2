{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintClike where

-- pretty-printer generated by the BNF converter

import AbsClike
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print TFloat where
  prt _ (TFloat (_,i)) = doc (showString ( i))


instance Print WriteIntPP where
  prt _ (WriteIntPP (_,i)) = doc (showString ( i))


instance Print WriteFloatPP where
  prt _ (WriteFloatPP (_,i)) = doc (showString ( i))


instance Print WriteCharPP where
  prt _ (WriteCharPP (_,i)) = doc (showString ( i))


instance Print WriteStringPP where
  prt _ (WriteStringPP (_,i)) = doc (showString ( i))


instance Print ReadIntPP where
  prt _ (ReadIntPP (_,i)) = doc (showString ( i))


instance Print ReadFloatPP where
  prt _ (ReadFloatPP (_,i)) = doc (showString ( i))


instance Print ReadCharPP where
  prt _ (ReadCharPP (_,i)) = doc (showString ( i))


instance Print ReadStringPP where
  prt _ (ReadStringPP (_,i)) = doc (showString ( i))



instance Print Boolean where
  prt i e = case e of
    Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print RExpr where
  prt i e = case e of
    OrOp rexpr1 rexpr2 _ -> prPrec i 0 (concatD [prt 0 rexpr1, doc (showString "||"), prt 1 rexpr2])
    AndOp rexpr1 rexpr2 _ -> prPrec i 1 (concatD [prt 1 rexpr1, doc (showString "&&"), prt 2 rexpr2])
    NotOp rexpr _ -> prPrec i 2 (concatD [doc (showString "!"), prt 3 rexpr])
    EqOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "=="), prt 6 rexpr2])
    NeqOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "!="), prt 6 rexpr2])
    LtOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<"), prt 6 rexpr2])
    LtEOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<="), prt 6 rexpr2])
    GtOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">"), prt 6 rexpr2])
    GtEOp rexpr1 rexpr2 _ -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">="), prt 6 rexpr2])
    AddOp rexpr1 rexpr2 _ -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "+"), prt 8 rexpr2])
    SubOp rexpr1 rexpr2 _ -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "-"), prt 8 rexpr2])
    MulOp rexpr1 rexpr2 _ -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "*"), prt 9 rexpr2])
    DivOp rexpr1 rexpr2 _ -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "/"), prt 9 rexpr2])
    ModOp rexpr1 rexpr2 _ -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "%"), prt 9 rexpr2])
    NegOp rexpr _ -> prPrec i 11 (concatD [doc (showString "-"), prt 12 rexpr])
    RefOp lexpr _ -> prPrec i 11 (concatD [doc (showString "&"), prt 0 lexpr])
    FCall funcall -> prPrec i 12 (concatD [prt 0 funcall])
    Int n -> prPrec i 13 (concatD [prt 0 n])
    Char c -> prPrec i 13 (concatD [prt 0 c])
    String str -> prPrec i 13 (concatD [prt 0 str])
    Real tfloat -> prPrec i 13 (concatD [prt 0 tfloat])
    Bool boolean -> prPrec i 13 (concatD [prt 0 boolean])
    Lexpr lexpr -> prPrec i 14 (concatD [prt 0 lexpr])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FunCall where
  prt i e = case e of
    Call id rexprs _ -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexprs, doc (showString ")")])
    WIntCall writeintpp rexpr -> prPrec i 0 (concatD [prt 0 writeintpp, doc (showString "("), prt 0 rexpr, doc (showString ")")])
    WFloatCall writefloatpp rexpr -> prPrec i 0 (concatD [prt 0 writefloatpp, doc (showString "("), prt 0 rexpr, doc (showString ")")])
    WCharCall writecharpp rexpr -> prPrec i 0 (concatD [prt 0 writecharpp, doc (showString "("), prt 0 rexpr, doc (showString ")")])
    WStringCall writestringpp rexpr -> prPrec i 0 (concatD [prt 0 writestringpp, doc (showString "("), prt 0 rexpr, doc (showString ")")])
    RIntCall readintpp -> prPrec i 0 (concatD [prt 0 readintpp, doc (showString "("), doc (showString ")")])
    RFloatCall readfloatpp -> prPrec i 0 (concatD [prt 0 readfloatpp, doc (showString "("), doc (showString ")")])
    RCharCall readcharpp -> prPrec i 0 (concatD [prt 0 readcharpp, doc (showString "("), doc (showString ")")])
    RStringCall readstringpp -> prPrec i 0 (concatD [prt 0 readstringpp, doc (showString "("), doc (showString ")")])

instance Print LExpr where
  prt i e = case e of
    PreInc lexpr _ -> prPrec i 0 (concatD [doc (showString "++"), prt 1 lexpr])
    PreDecr lexpr _ -> prPrec i 0 (concatD [doc (showString "--"), prt 1 lexpr])
    PostInc lexpr _ -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "++")])
    PostDecr lexpr _ -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "--")])
    BasLExpr blexpr -> prPrec i 2 (concatD [prt 0 blexpr])

instance Print BLExpr where
  prt i e = case e of
    ArrayEl blexpr rexpr _ -> prPrec i 0 (concatD [prt 0 blexpr, doc (showString "["), prt 0 rexpr, doc (showString "]")])
    Id id -> prPrec i 0 (concatD [prt 0 id])
    Deref blexpr _ -> prPrec i 0 (concatD [doc (showString "*"), prt 0 blexpr])

instance Print Program where
  prt i e = case e of
    Progr constancts declars -> prPrec i 0 (concatD [prt 0 constancts, prt 0 declars])

instance Print Declar where
  prt i e = case e of
    VarDecl type_ morevars _ -> prPrec i 0 (concatD [prt 0 type_, prt 0 morevars, doc (showString ";")])
    FunDecl id parameters _ -> prPrec i 0 (concatD [doc (showString "void"), prt 0 id, doc (showString "("), prt 0 parameters, doc (showString ")"), doc (showString ";")])
    ProcDecl id parameters blockstmt _ -> prPrec i 0 (concatD [doc (showString "void"), prt 0 id, doc (showString "("), prt 0 parameters, doc (showString ")"), prt 0 blockstmt])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print MoreVar where
  prt i e = case e of
    VarInit id init -> prPrec i 0 (concatD [prt 0 id, prt 0 init])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Init where
  prt i e = case e of
    Init1 -> prPrec i 0 (concatD [])
    Init2 complexrexpr -> prPrec i 0 (concatD [doc (showString "="), prt 0 complexrexpr])

instance Print Constanct where
  prt i e = case e of
    Const id type_ rexpr _ -> prPrec i 0 (concatD [doc (showString "#define"), prt 0 id, prt 0 type_, prt 13 rexpr])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ComplexRExpr where
  prt i e = case e of
    Simple rexpr -> prPrec i 0 (concatD [prt 0 rexpr])
    Array complexrexprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 complexrexprs, doc (showString "]")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    BasType basictype -> prPrec i 0 (concatD [prt 0 basictype])
    CompType compositetype -> prPrec i 0 (concatD [prt 0 compositetype])

instance Print BasicType where
  prt i e = case e of
    BasicType_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    BasicType_char -> prPrec i 0 (concatD [doc (showString "char")])
    BasicType_float -> prPrec i 0 (concatD [doc (showString "float")])
    BasicType_int -> prPrec i 0 (concatD [doc (showString "int")])
    BasicType_string -> prPrec i 0 (concatD [doc (showString "string")])
    BasicType_void -> prPrec i 0 (concatD [doc (showString "void")])

instance Print CompositeType where
  prt i e = case e of
    ArrDef type_ rexpr -> prPrec i 0 (concatD [prt 0 type_, doc (showString "["), prt 0 rexpr, doc (showString "]")])
    ArrNoDef type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "["), doc (showString "]")])
    Pointer type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "*")])

instance Print Parameter where
  prt i e = case e of
    Param type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print BlockStmt where
  prt i e = case e of
    ProcBlock declars stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 declars, prt 0 stmts, doc (showString "}")])

instance Print Stmt where
  prt i e = case e of
    MoreDecl declar -> prPrec i 0 (concatD [prt 0 declar])
    ProcCall funcall -> prPrec i 0 (concatD [prt 0 funcall, doc (showString ";")])
    IndIter whilestmt -> prPrec i 0 (concatD [prt 0 whilestmt])
    Cond conditionstmt -> prPrec i 0 (concatD [prt 0 conditionstmt])
    Assgn blexpr assignmentop rexpr _ -> prPrec i 0 (concatD [prt 0 blexpr, prt 0 assignmentop, prt 0 rexpr, doc (showString ";")])
    LExprStmt lexpr -> prPrec i 0 (concatD [prt 0 lexpr, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Assignment_op where
  prt i e = case e of
    Assign -> prPrec i 0 (concatD [doc (showString "=")])
    AssgnMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AssgnAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AssgnDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AssgnSub -> prPrec i 0 (concatD [doc (showString "-=")])

instance Print ConditionStmt where
  prt i e = case e of
    IfNoElse rexpr blockstmt _ -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockstmt])
    IfYesElse rexpr blockstmt1 blockstmt2 _ -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockstmt1, doc (showString "else"), prt 0 blockstmt2])

instance Print WhileStmt where
  prt i e = case e of
    While rexpr blockstmt _ -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockstmt])


